{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[],"note":"> 本文主要对 [Go 语言内存分配器的实现原理](https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/) 的总结；如有问题，欢迎批评指正！","watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"#0D7C82"},"children":[{"parent":"e0d35ac98c35","note":"#### 定义\n只需要在内存中维护一个指向内存特定位置的指针，当用户程序申请内存时，分配器只需要检查剩余的空闲内存、返回分配的内存区域并修改指针在内存中的位置，即移动下图中的指针。\n\n\n#### 优点\n有较快的执行速度，以及较低的实现复杂度；\n\n#### 缺点\n无法在内存被释放时重用内存，因此，需要合适的垃圾回收算法配合使用，标记压缩（Mark-Compact）、复制回收（Copying GC）和分代回收（Generational GC）等算法可以通过拷贝的方式整理存活对象的碎片，将空闲内存定期合并。\n","image":{"w":427,"h":103,"url":"http://cdn.processon.com/60fbd91a1efad46a20a38186?e=1627121450&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:iU5C3MuxrEmQFR7nara6WH-cnkA="},"children":[],"id":"d7fb0428b194","title":"线性分配器"},{"parent":"e0d35ac98c35","note":"#### 定义\n只需要在内存中维护一个指向内存特定位置的指针，当用户程序申请内存时，分配器只需要检查剩余的空闲内存、返回分配的内存区域并修改指针在内存中的位置，即移动下图中的指针。\n\n\n下面我们介绍几种常见的分配策略。","image":{"w":366,"h":98,"url":"http://cdn.processon.com/60fbd9330791294ae09f54ca?e=1627121475&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:GKjbXzdd_ZTtOX5lLaT8yRGPkwY="},"children":[{"parent":"f3aa3a331441","note":"首次适应（First-Fit）：从链表头开始遍历，选择第一个大小大于申请内存的内存块；\n","children":[],"id":"2442fa64591c","title":"首次适应"},{"parent":"f3aa3a331441","note":"循环首次适应（Next-Fit）：从上次遍历的结束位置开始遍历，选择第一个大小大于申请内存的内存块；\n \n","children":[],"id":"39a4fc7053c2","title":"循环首次适应"},{"parent":"f3aa3a331441","note":"最优适应（Best-Fit）：从链表头遍历整个链表，选择最合适的内存块；\n","children":[],"id":"607bab5a93fb","title":"首次适应"},{"parent":"f3aa3a331441","image":{"w":263,"h":129,"url":"http://cdn.processon.com/60fbd94a0791294ae09f54e1?e=1627121498&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:1i3R_Wm-pyT12KjgPiE0jTwloyo="},"note":"- 隔离适应（Segregated-Fit）：将内存分割成多个链表，每个链表中的内存块大小相同，申请内存时先找到满足条件的链表，再从链表中选择合适的内存块；\n\n> 例如：通过该策略会将内存分割成由 4、8、16、32 字节的内存块组成的链表，当我们向内存分配器申请 8 字节的内存时，我们会在上图中的第二个链表找到空闲的内存块并返回。隔离适应的分配策略减少了需要遍历的内存块数量，提高了内存分配的效率。\n\n- Go 语言使用的内存分配策略与隔离适应策略有些相似。","children":[],"id":"49b4db2f7d1a","title":"隔离适应分配策略"}],"id":"f3aa3a331441","title":"空闲链表分配器","summaries":[]}],"id":"e0d35ac98c35","title":"常见分配器","icons":[{"name":"priority","index":"0","text":"&#xe67a"}],"summaries":[]},{"parent":"root","note":"- 采用类似 TCMalloc （Thread-Caching Malloc）的分配策略，`它的核心理念是使用多级缓存将对象根据大小分类，并按照类别实施不同的分配策略，提高内存分配器的性能。`\n \n\n注：这种多层级的内存分配设计与计算机操作系统中的多级缓存也有些类似，因为多数的对象都是小对象，我们可以通过线程缓存和中心缓存提供足够的内存空间，发现资源不足时就从上一级组件中获取更多的内存资源。\n","lineStyle":{"randomLineColor":"#0FBAB0"},"children":[{"parent":"64aef539d32f","image":{"w":176,"h":94,"url":"http://cdn.processon.com/60fbd8375653bb3ddc10deb2?e=1627121223&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fu9dLZ9ZpJd-UC7jOA360GGSlzw="},"note":"- Go 运行时分配器都会引入Thread Cache(mcache)、Central Cache(mcentral)和Page Heap(mheap)三个组件分级管理内存：\n\n- 线程缓存属于每一个独立的线程，它能够满足线程上绝大多数的内存分配需求，因为不涉及多线程，所以也不需要使用互斥锁来保护内存，这能够减少锁竞争带来的性能损耗。当线程缓存不能满足需求时，运行时会使用中心缓存作为补充解决小对象的内存分配，在遇到 32KB 以上的对象时，内存分配器会选择页堆直接分配大内存。","children":[],"id":"7f29034d3cb1","title":"多级缓存"},{"parent":"64aef539d32f","note":"内存分配器会根据申请分配的内存大小选择不同的处理逻辑，运行时根据对象的大小将对象分成微对象、小对象和大对象三种；\n\n### 微对象\u00A0(0, 16B)\n##### 定义\n将小于 16 字节的非指针类型对象划分为微对象。\n#### 分配步骤\n使用 mcache 上的 tiny 分配器提高分配的性能，依次尝试从mcache、mcentral、mheap 分配内存；\n\n\n### 小对象 [16B, 32B]\n#### 定义\n指大小为 16 字节到 32,768 字节的对象以及所有小于 16 字节的指针类型的对象。\n#### 分配步骤\n小对象的分配可以被分成以下的三个步骤：\n1. 确定分配对象的大小以及跨度类 runtime.spanClass；\n2. 从 mcache、mcentral、mheap 中获取内存管理单元并从内存管理单元找到空闲的 mspan；\n调用；\n3. runtime.memclrNoHeapPointers 清空空闲内存中的所有数据；\n\n\n### 大对象\u00A0(32B, +∞)\n#### 定义\n指对于大于 32KB 的对象。\n#### 分配步骤\n不会从 mcache 或者 mcentral 中获取mspan，而是直接调用 runtime.mcache.allocLarge() 计算分配该对象所需要的页数，它按照 8KB 的倍数在堆上申请内存：\n注：申请内存时会创建一个跨度类为 0 的 spanClass 并调用 runtime.mheap.alloc() 分配一个管理对应内存的管理单元。\n\n\n","image":{"w":198,"h":63,"url":"http://cdn.processon.com/60fbd62e7d9c083494e4f19f?e=1627120702&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:mxrfNifUne077BbrRHZWe1wHZxA="},"children":[],"id":"b51134d93c58","title":"对象分类"}],"id":"64aef539d32f","title":"分级分配策略","icons":[{"color":"rgb(255, 0, 0)","name":"flag","index":"32","text":"&#xe67e"},{"name":"priority","index":"1","text":"&#xe625"}],"summaries":[]},{"parent":"root","lineStyle":{"randomLineColor":"#80BA4C"},"children":[{"parent":"f92e7fee67c0","image":{"w":288,"h":79,"url":"http://cdn.processon.com/60f1837d637689739c3a28dd?e=1626444173&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:NsYeZoiB9D61Yp8716qQVqDVPR0="},"note":"","children":[{"parent":"aa26ecf41b68","note":"- 建立在堆区的内存是连续的这一假设上。\n- 在垃圾回收时会根据指针的地址判断对象是否在堆中，并通过上一段中介绍的过程找到管理该对象的 mspan。 \n","children":[],"id":"a5632323028d","title":"设计思想 "},{"parent":"aa26ecf41b68","note":"Go 语言程序的 1.10 版本在启动时会初始化整片虚拟内存区域，如下所示的三个区域 spans、bitmap 和 arena 分别预留了 512MB、16GB 以及 512GB 的内存空间，这些内存并不是真正存在的物理内存，而是虚拟内存。\n\n- arena 区：大小为512G,由一个个 page 组成,每个 page 8KB,一共有512GB/8KB 个页\n\n- spans 区：存放指向 arean 中 page \n 所属的 span 的指针,一个指针为 8byte 所以 span 区域的大小为【(512GB/一个page8KB)*一个指针8byte= 512M】\n\n- bitmap 主要用于GC, 用两个 bit 表示 arena 中一个字的可用状态,一个字为8 byte，所以 bitmap 区域的大小为【(512G/一个字 8byte)*2bit/每个字节8个bit=16G】\n\n\n","children":[],"id":"1eb8cd9584c6","title":"内部实现"},{"parent":"aa26ecf41b68","note":"设计虽然简单并且方便，但是在 C 和 Go 混合使用时会导致程序崩溃。\n\n- 分配的内存地址会发生冲突，导致堆的初始化和扩容失败；\n- 没有被预留的大块内存可能会被分配给 C 语言的二进制，导致扩容后的堆不连续； \n导致如果不预留内存空间却会在特殊场景下造成程序崩溃。而预留大块内存空间而不使用是不切实际的；\n- 内存不可以超过512G；\n","children":[],"id":"edfd3e74e27c","title":"优缺点 "}],"id":"aa26ecf41b68","title":"线性内存（&lt; 1.11）","summaries":[]},{"parent":"f92e7fee67c0","image":{"w":339,"h":137,"url":"http://cdn.processon.com/60f183965653bb0b4888744a?e=1626444198&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:-ezqq2siR9S3xj2wh-4kmh3ckcw="},"children":[{"parent":"02decece351e","note":"将原有的连续大内存切分成稀疏的小内存，而用于管理这些内存的元信息也被切分成了小块。","children":[],"id":"edc2b797c2e0","title":"设计思想"},{"parent":"02decece351e","note":"\n- 改成了两维稀疏索引的方式. 内存可以超过512G, 也可以允许不连续的内存.\n\n- mheap 中的 areans 字段是一个指针数组, 每个 heapArena 管理 64M 的内存.\n\n- bitmap 和 spans 和上面的功能一致.\n\n\n","children":[],"id":"151ee34c909e","title":"内部实现"},{"parent":"02decece351e","note":"不仅能移除堆大小的上限,还能解决 C 和 Go 混合使用时的地址空间冲突问题，但也使内存管理变得更加复杂，对垃圾回收稍有影响，大约会增加 1% 的垃圾回收开销。","children":[],"id":"85cc41b18e42","title":"优缺点"}],"id":"02decece351e","title":"二维稀疏内存（&gt;= 1.11 ）","summaries":[]}],"id":"f92e7fee67c0","title":"堆区虚拟内存布局的演化","icons":[{"name":"priority","index":"2","text":"&#xe62a"}],"summaries":[]},{"parent":"root","note":"","image":{"w":168,"h":124,"url":"http://cdn.processon.com/60f180f0f346fb3f3413633c?e=1626443520&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:J_cKMnefNHwnZ7NVO0doJ2UZq-4="},"lineStyle":{"randomLineColor":"#DD489D"},"children":[{"parent":"b06f266a5c81","note":"- mspan之间形成双向链表结构，每个mspan 都管理 n 个大小为 8KB 的页\n\n\n- 以页为单位向堆申请内存，以对象为单位查找分配空间\n\n- 每个 mspan 都有一个 spanClass 属性\n\n\n","image":{"w":550,"h":119,"url":"http://cdn.processon.com/60fa7769e401fd7e99796e30?e=1627030906&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:SoPfKOusCWBAJ_oGalzVTBFdtow="},"children":[{"parent":"5188fea2c44a","image":{"w":318,"h":209,"url":"http://cdn.processon.com/60f66a3b1efad43a71d8f235?e=1626765387&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:3Ji0lwXPDksbObPzQo1KGxnP1JY="},"note":"\n上图表示 slot 大小为 32byte 的 span, 上一次gc之后, 前8个slot使用如上。\n\n- freeindex表示 < 该位置的都被分配了, >= 该位置的可能被分配, 也可能没有. 配合allocCache来寻找. 每次分配后, freeindex设置为分配的slot+1。\n\n-  allocBits表示上一次GC之后哪一些slot被使用了: 0未使用或释放, 1已分配。\n\n- allocCache 表示从 freeindex 开始的64个 slot 的分配情况, 1为未分配, 0为分配. 使用 ctz(Count Trailing Zeros指令)来找到第一个非0位. 使用完了就从 allocBits 加载, 取反。\n\n- 每次gc完之后, sweep阶段, 将allocBits 设置为 gcmarkBits。\n","children":[],"id":"b92184a32d26","title":"mspan 结构体"},{"parent":"5188fea2c44a","image":{"w":264,"h":213,"url":"http://cdn.processon.com/60f66a481e08534af6c9aa9d?e=1626765400&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:6lNhEL0_K5UFnIyvniD632IH_pg="},"note":"`有67种 size class，在用 noscan 区分的话，则一共有134种 spanClass。`\n\n- spanClass 表示一个 span 的 size Class 和 是否含有 noscan 标记位。\n\n- size class 决定了 mspan 存储的对象大小和个数；每种 size class 都会存储特定大小的对象、包含特定数量的页数以及对象，其中 class=0 的特殊跨度类，它能够管理大于 32KB 的特殊对象；\n\n- noscan 标记位：表示存储对象是否包含指针，方便后期垃圾回收；每个 size class 都有一个 noscan spanClass 和一个 scan spanClass。 noscan spanClass 只包含 noscan 对象，它不包含指针，因此不需要被垃圾收集器扫描。\n\n\n\n上面图表展示了对象大小从 8B 到 32KB，总共 66 种跨度类的大小、存储的对象数以及浪费的内存空间，以表中的第四个跨度类为例，跨度类为 4 的\u00A0mpsan\u00A0中对象的大小上限为 48 字节、管理 1 个页、最多可以存储 170 个对象。因为内存需要按照页进行管理，所以在尾部会浪费 32 字节的内存，当页中存储的对象都是 33 字节时，最多会浪费 31.52% 的资源：\n(48−33)∗170+328192=0.31518\n","children":[],"id":"e388f1671c79","title":"134 种 spanClass ","summaries":[]}],"id":"5188fea2c44a","title":"mspan(内存管理的基本单元)","summaries":[]},{"parent":"b06f266a5c81","note":"- 每一个 mcache 都持有 67 * 2 个 mspan；\n- 同处理器P绑定，主要用来缓存用户程序申请的微小对象。无锁访问内存管理单元。\n\n注：上图中第二行 mspan 标号错了，应该是66","image":{"w":473,"h":157,"url":"http://cdn.processon.com/60fa77471e085366ea4bd262?e=1627030871&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:i8ebxuIppLzClrka1pdW1poq9As="},"children":[{"parent":"1e8332dea608","note":"初始化时是不包含 mspan (所有mspan都是空的占位符\u00A0emptymspan)，只有当用户程序申请内存时才会从上一级组件获取新的 mspan 满足内存分配的需求。\n","children":[],"id":"0ec3aa669bc0","title":"初始化"},{"parent":"1e8332dea608","note":"如何向 mcache 中插入 mspan?\n如果 mcache 中没有找到可用的 mspan 将使用 mcentral 中的可用 mspan 将其替换。\n\n","children":[],"id":"ffdab04772cd","title":"替换"},{"parent":"1e8332dea608","note":"","children":[{"parent":"9cd14957350a","note":"- mcache 中包含三个用于分配微对象的字段。这三个字段组成了tiny 分配器（微对象分配器）。\n\n```\ntype mcache struct {\n\ttiny             uintptr\n\ttinyoffset       uintptr\n\tlocal_tinyallocs uintptr\n}\n```\n","children":[],"id":"d65866f5df59","title":"由三个字段组成"},{"parent":"9cd14957350a","note":"- 只管理非指针类型对象的内存；\n\n- 管理的内存块大小 maxTinySize\u00A0是可以调整的，默认为 16 字节，maxTinySize\u00A0的值越大，组合多个对象的可能性就越高，内存浪费也就越严重；maxTinySize\u00A0越小，内存浪费就会越少，不过无论如何调整，8 的倍数都是一个很好的选择。\n","children":[],"id":"e396f79dbe2c","title":"默认管理16 字节以下非指针类型对象内存"},{"parent":"9cd14957350a","note":"\n如上图所示，tiny 分配器已经在 16 字节的内存块中分配了 12 字节的对象，如果下一个待分配的对象小于 4 字节，它就会直接使用上述内存块的剩余部分，减少内存碎片，不过该内存块只有在 3 个对象都被标记为垃圾时才会被回收。\n","image":{"w":333,"h":78,"url":"http://cdn.processon.com/60fbdfd6637689719d24bcb6?e=1627123174&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:7tYqF19251kA7rvypUqbqiKnXXU="},"children":[],"id":"a92fdbeb4e44","title":"具体分配逻辑"}],"id":"9cd14957350a","title":"tiny 分配器"}],"id":"1e8332dea608","title":"mcache(线程缓存)","summaries":[]},{"parent":"b06f266a5c81","image":{"w":483,"h":160,"url":"http://cdn.processon.com/60fa7971f346fb1b4f5dd739?e=1627031425&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ULdj-ED3A7RPpnSNwYzyk2L1Q4E="},"note":"- 每个 mcentral 都是一种mspan的全局后备资源，因此共有 134 个 mcentral；\n- 访问 mcentral 中的 mspan 需要使用互斥锁；\n ","children":[{"parent":"35c8aeeb1f4a","note":"为了方便后续回收和查找，mcentral 内含 2个 mspanList：\n- empty mspanList：有空闲对象的未满 mspan 列表；\n- nonempty mspanList：没有空闲对象的满的 mspan 列表；\n\n注：该结构体在初始化时，两个链表都不包含任何内存","children":[],"id":"ac145f336185","title":"内含2个 mspanList","summaries":[]},{"parent":"35c8aeeb1f4a","note":"1.从有 empty mspanList 中查找可以使用的 mspan；\n2.从 nonempty mspanList 中查找可以使用的 mspan；\n3.调用 runtime.mcentral.grow 从堆中申请新的 mpsan；\n注：无论通过哪种方法获取到了 mspan，最后都会对 mspan 中 allocCache 等字段进行更新，让运行时在分配内存时能够快速找到空闲的对象。","children":[],"id":"d2efb7185b7e","title":"mcache 从 mcentral 获取 mspan 过程"}],"id":"35c8aeeb1f4a","title":"mcentral(中心缓存)","summaries":[]},{"parent":"b06f266a5c81","note":"一个全局的结构体，统一管理堆上初始化的所有对象","children":[{"parent":"30e29f23ad48","note":"","image":{"w":615,"h":189,"url":"http://cdn.processon.com/60fa7d477d9c083494e3c382?e=1627032407&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:1JOSGDoJmWrU9YO_U262VzZMWFY="},"children":[],"id":"81f1c84fc16e","title":"持有的 134 个mcentral"},{"parent":"30e29f23ad48","image":{"w":532,"h":278,"url":"http://cdn.processon.com/60fa7d527d9c083494e3c3b2?e=1627032418&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Pj9MAjpr5zcVSY-pS2jvUHJKV9Y="},"note":"","children":[],"id":"a5e2299be8db","title":"内部采用二维矩阵 runtime.heapArena 管理所有内存空间，内存可以是不连续的","summaries":[]},{"parent":"30e29f23ad48","image":{"w":365,"h":246,"url":"http://cdn.processon.com/60fbbedc7d9c083494e4d19d?e=1627114733&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:waVLJ3AGS6EID5szysWTjQL9buU="},"note":"表格中展示了不同平台上 Go 语言程序管理的堆区大小以及\u00A0heapArea\u00A0占用的内存空间；\n\n- Linux 的 x86-64架构上,单个 Go 语言程序的内存上限也就是 256TB (256TB = 4M * 64MB)；\n注释：二维数组的一维大小会是 1，而二维大小是 4M(4,194,304)，因为每一个指针占用 8 字节的内存空间，所以元信息的总大小为 32MB；由于每个 runtime.heapArena 都会管理 64MB 的内存，整个堆区最多可以管理 256TB 的内存。\n","children":[],"id":"cca6c8d34fea","title":"不同平台和架构具体参数"}],"id":"30e29f23ad48","title":"mheap(页堆)","summaries":[]},{"parent":"b06f266a5c81","children":[{"parent":"7e8a2270651e","children":[],"id":"2579eecbfc24","title":"mcentral 属于 mheap，mhepa 会从操作系统中申请内存，会维护全局的 mspan，各个线程会通过 mcentral 获取新的 mspan"}],"id":"7e8a2270651e","title":"之间联系","summaries":[]}],"collapsed":false,"id":"b06f266a5c81","title":"内存管理组件","icons":[{"color":"rgb(13, 11, 34)","name":"priority","index":"3","text":"&#xe635"}],"summaries":[]},{"parent":"root","image":{"w":323,"h":201,"url":"http://cdn.processon.com/60fbe584f346fb1b4f5f3267?e=1627124628&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:eGXgVkKeWUsRESVioAXFR-4iLwU="},"note":"mcache 中 stackcache 用于分配 groutine 的stack 内存，和普通对象内存一样栈分配也有多级和多个层次；\n\n\n分配步骤：\n- 当 &lt;16K 先从 mcache 的 stackcache 中分配，如果无法分配，则需要从全局stackpool 分配出一批 stack, 赋给该 mcache 的 stackcache, 再从 stackcache 中分配；\n- 当 &gt;16K 的直接从全局的 stackLarge 分配\n注：上图是 linux 系统中的 stackcache 的示意图，stackfreelist 保存着空闲的stacks列表，分别缓存 2KB、4KB、8KB 和 16KB 的栈内存。 \n\n\n","lineStyle":{"randomLineColor":"#02ACF4"},"children":[],"id":"04807ec40b71","title":"栈缓存&nbsp;stackcache"},{"parent":"root","lineStyle":{"randomLineColor":"#DD489D"},"children":[{"parent":"c478b3b4cf6f","children":[],"link":{"type":"url","title":"","value":"https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-memory-allocator/"},"id":"756a80fbaa67","title":"Draveness-内存分配器"},{"parent":"c478b3b4cf6f","children":[],"link":{"type":"url","title":"","value":"https://gitee.com/zhaojinxin_golden/article-images/blob/master/go/golden-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.pptx"},"id":"514230ec87a4","title":"golden-内存分配PPT"}],"id":"c478b3b4cf6f","title":"参考资料"}],"root":true,"theme":"delicate_caihong","id":"root","title":"Go 内存分配","structure":"mind_free"}},"meta":{"exportTime":"2022-01-10 22:38:52","member":"5ab9cb2de4b018c271cab8d4","diagramInfo":{"creator":"5ab9cb2de4b018c271cab8d4","created":"2021-07-13 23:49:38","modified":"2022-01-10 15:38:46","title":"Go_memory_allocator","category":"mind_free"},"id":"60edb61207912906d9feb748","type":"ProcessOn Schema File","version":"1.0"}}